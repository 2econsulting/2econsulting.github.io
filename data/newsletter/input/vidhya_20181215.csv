"site","date","headline","url_address","text"
"vidhya",2018-12-13,"WNS Hackathon Solutions by Top Finishers","https://www.analyticsvidhya.com/blog/2018/12/wns-hackathon-solutions-by-top-finishers/","How do you prefer learning a machine learning technique? First get to know how it works on paper and then apply it? Or get your hands dirty straight away by learning the practical side? I prefer the latter <U+2013> there¡¯s nothing like ingraining a concept by right away applying it and watching it in action. Participating in online hackathons, preparing and tuning our models, and competing against fellow top participants can help us evaluate our performance and understand the area where need to improve. There is always something new to learn, and someone¡¯s unique approach to learn from! At the end of each hackathon, we eagerly wait for the final rankings and look forward to the winning solutions so that we can learn, improve and prepare ourselves for the next hackathon (and perhaps the next project?). We recently conducted the WNS Analytics Wizard 2018, which received an overwhelming response <U+2013> 3800+ registrations, 364 teams, and more than 1,200 submissions! Here is a glimpse of the solutions provided by the folks who finished in the top echelons for the WNS online hackathon conducted on 14 <U+2013> 16 September, 2018. The WNS Analytics wizard is a one-of-its-kind online analytics hackathon conducted by WNS, a leading global business process management company. WNS offers business value to 350+ global clients by combining operational excellence with deep domain expertise in key industry verticals. This hackathon was aimed at giving budding data wizards the exciting opportunity to get a sneak peek into real-life business scenarios. We received more than 3800 registrations and a total of 1215 submissions during this 2-day online hackathon. The top finishers for WNS Hackathon are- Lets have a look at the problem statement for WNS Hackathon The problem statement for WNS Analytics Wizard was based on a real-life business use case. As a part of the WNS hackathon, participants were required to classify whether an employee should be promoted or not, by looking at employee¡¯s past and current performance. Train consisted of 54808 rows and test had 23490 rows. Raw dataset contained 12 features. An employee is first nominated for promotion (based on his/her previous performance) and then goes through a training process. The task is to predict whether a potential promotee in the test set will be promoted or not after the evaluation process. The multiple attributes provided to the participants include the employee¡¯s past performance, education level, years of experience, previous year¡¯s rating , number of trainings taken in the last year, training score etc. Now that we have an understanding about the problem statement, let¡¯s have a look at the approaches shared by the winners. Siddharth followed a well structured approach that helped him secure the first position in the competition. He has divided<U+00A0> the approach into three broad categories <U+2013> model selection, feature engineering and hyperparameter tuning. Siddharth has listed down the steps he followed <U+2013> Model Selection Feature Engineering and Missing value imputation Hyperparameter tuning: Here is the complete code for the above mentioned approach : Rank1 Solution The second position was grabbed by Nikita Churkin & Dmitrii Simakov. According to the team, their approach is based on a good validation scheme, careful feature selection and strong regularization. Below is a detailed explanation of the same. Validation <U+00A0>Feature Generation and Selection Model Building The code for rank 2 solution is shared here. harshsarda29 & maverick_kamakal participated in WNS hackathon as a team and secured the third position. They used a 5 fold stratified scheme for validation and prepared three models XGBoost, LightGBM, CatBoost. Here is a complete step by step approach followed by the team: Missing value imputation Categorical Encodings: Hyper-parameter Finding: Feature Engineering: Model Building: The final model was an ensemble of 29 models consisting of: Here is the link to the code for Rank 3 The solutions shared above is a proof that the winners have put in great efforts and truly deserve the rewards for the same. They came up with some innovative solutions and had a well structured approach. I hope you find these solutions useful and have learnt some key takeaways which you can implement in the upcoming hackathons! Register yourself in the upcoming hackathons at DataHack Platform. Link for rank 3 and rank 1 is same. Hi Ankur, Thanks for letting us know. We have updated the link. Are the data sets available somewhere? Hi Barna, The datasets are not accessible once the competition is over. Where to get the dataset of this solution."
"vidhya",2018-12-10,"Building a Face Detection Model from Video using Deep Learning (Python Implementation)","https://www.analyticsvidhya.com/blog/2018/12/introduction-face-detection-video-deep-learning-python/","¡°Computer vision and machine learning have really started to take off, but for most people, the whole idea of what a computer is seeing when it¡¯s looking at an image is relatively obscure.¡± <U+2013> Mike Kreiger The wonderful field of Computer Vision has soared into a league of it¡¯s own in recent years. There are an impressive number of applications already in wide use around the world <U+2013> and we are just getting started! One of my favorite things in this field is the idea of our community embracing the concept of open source. Even the big tech giants are willing to share new breakthroughs and innovations with everyone so that the techniques do not remain a ¡°thing of the rich¡±. One such technology is face detection, which offers a plethora of potential applications in real-world use cases (if used correctly and ethically). In this article, I will show you how to build a capable face detection algorithm using open source tools. Here is a demo to get you excited and set the stage for what will follow: So, are you ready? Read on then! Note: If you want to understand the intricacies of computer vision, this course <U+2013> Computer Vision using Deep Learning <U+2013> is the perfect place to start. Let me pull up some awesome examples of applications where face detection techniques are being popularly used. I¡¯m sure you must have come across these use cases at some point and not realized what technique was being used behind the scenes! For instance, Facebook replaced manual image tagging with automatically generated tag suggestions for each picture that was uploaded to the platform. Facebook uses a simple face detection algorithm to analyze the pixels of faces in the image and compare it with relevant users. We¡¯ll learn how to build a face detection model ourselves, but before we get into the technical details of that, let¡¯s discuss some other use cases. We are becoming used to unlocking our phones with the latest ¡®face unlock¡¯ feature. This is a very small example of how a face detection technique is being used to maintain the security of personal data. <U+00A0>The same can be implemented on a larger scale, enabling cameras to capture images and detect faces. There are a few other lesser known applications of face detection in advertising, healthcare, banking, etc. Most of the companies, or even in many conferences, you are supposed to carry an ID card in order to get entry. But what if we could figure out a way so that you don¡¯t need to carry any ID card to get access? Face Detection helps in making this process smooth and easy. The person just looks at the camera and it will automatically detect whether he/she should be allowed to enter or not. Another interesting application of face detection could be to count the number of people attending an event (like a conference or concert). Instead of manually counting the attendees, we install a camera which can capture the images of the attendees and give us the total head count. This can help to automate the process and save a ton of manual effort. Pretty useful, isn¡¯t it? You can come up with many more applications like these <U+2013> feel free to share them in the comments section below. In this article, I will focus upon the practical application of face detection, and just gloss over upon how the algorithms in it actually work. If you want to know more about them, you go through this article. Now that you know the potential applications you can build with face detection techniques, let¡¯s see how we can implement this using the open source tools available to us. That¡¯s the advantage we have with our community <U+2013> the willingness to share and open source code is unparalleled across any industry. For this article specifically, here¡¯s what I have used and recommend using: Let¡¯s explore these points in a bit more detail to ensure everything is set up properly before we build our face detection model. The first thing you have to do is check if the webcam is setup correctly. A simple trick in Ubuntu <U+2013> see if the device has been registered by the OS. You can follow the steps given below: The code in this article is built using Python version 3.5. Although there are multiple ways to install Python, I would recommend using Anaconda <U+2013> the most popular Python distribution for data science. Here is a link to install Anaconda in your system. OpenCV (Open Source Computer Vision) is a library aimed at building computer vision applications. It has numerous pre-written functions for image processing tasks. To install OpenCV, do a pip install of the library: Now that you have setup your system, it¡¯s finally time to dive in to the actual implementation. First, we will quickly build our program, then break it down to understand what we did. First, create a file face_detector.py and then copy the code given below: Then, run this Python file by typing: If everything works correctly, a new window will pop up with real-time face detection running. To summarize, this is what our above code did: Simple, isn¡¯t it? If you want to go into more granular details, I have included the comments in each code section. You can always go back and review what we have done. The fun doesn¡¯t stop there! Another cool thing we can do <U+2013> build a complete use case around the above code. And you don¡¯t need to start from scratch. We can make just a few small changes to the code and we¡¯re good to go. Suppose, for example, you want to build an automated camera-based system to track where the speaker is in real-time. According to his position, the system rotates the camera so that the speaker is always in the middle of the video. How do we go about this? The first step is to build a system which identifies the person(s) in the video, and focuses on the location of the speaker. Let¡¯s see how we can implement this. For this article, I have taken a video from Youtube which shows a speaker talking during the DataHack Summit 2017 conference. First, we import the necessary libraries: Then, read the video and get the length: After that, we create an output file with the required resolution and frame rate which is similar to the input file. Load a sample image of the speaker to identify him in the video: All this completed, now we run a loop that will do the following: Let¡¯s see the code for this: The code would then give you an output like this: What a terrific thing face detection truly is. <U+0001F642> Congratulations! You now know how to build a face detection system for a number of potential use cases. Deep learning is such a fascinating field and I¡¯m so excited to see where we go next. In this article, we learned how you can leverage open source tools to build real-time face detection systems that have real-world usefulness. I encourage you to build plenty of such applications and try this on your own. Trust me, there¡¯s a lot to learn and it¡¯s just so much fun! As always, feel free to reach out if you have any queries/suggestions in the comment section below!"
