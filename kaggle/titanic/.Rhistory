# settting
path = "C:/Users/jacob/Documents/Kaggle/titanic"
setwd(path)
savePath <- "./output"
source('fe_titanic.R')
library(rAutoML)
library(rAutoFE)
library(rAutoFS)
library(data.table)
library(h2o)
# prepare data
data <- read.csv("./input/train.csv")
data <- fe_titanic(data)
data$Survived <- as.factor(data$Survived)
sum(is.na(data))
sum(is.na(data))
sapply(data, is.character)
str(data)
sapply(data, is.character)
sapply(data, is.factor)
which(sapply(data, is.factor))
names(which(sapply(data, is.factor)))
miss_index <- names(which(sapply(data, is.factor)))
str(data)
miss_index <- names(which(sapply(data, is.numeric)))
data[,miss_index]
impute
fe_impute <- function(data){
for(i in names(which(sapply(data, is.numeric)))){
miss_index <- which(is.na(data[,i]))
data[miss_index, i] <- median(data[, i], na.rm=TRUE)
}
}
fe_impute(data)
sum(is.na(data))
fe_impute(data)
# prepare data
data <- read.csv("./input/train.csv")
data <- fe_titanic(data)
data$Survived <- as.factor(data$Survived)
str(data)
sum(is.na(data))
fe_impute(data)
fe_impute <- function(data){
for(i in names(which(sapply(data, is.numeric)))){
miss_index <- which(is.na(data[,i]))
data[miss_index, i] <- median(data[, i], na.rm=TRUE)
}
return(data)
}
fe_impute(data)
data <- fe_impute(data)
sum(is.na(data))
# prepare data
data <- read.csv("./input/train.csv")
data <- fe_titanic(data)
data$Survived <- as.factor(data$Survived)
data <- fe_impute(data)
sum(is.na(data))
str(data)
# use h2o.impute in fe
setDT(data)
splits <- splitFrame(dt=data, ratio = c(0.6, 0.2), seed=1234)
train <- splits[[1]]
valid <- splits[[2]]
test  <- splits[[3]]
y <- "Survived"
x = colnames(train)[colnames(train)!=y]
h2o.init()
# title : titanic from kaggle
# authro : jacob
# desc : apply rAutoML
remove.packages("rAutoFE")
library(devtools)
install_github("2econsulting/rAutoFE")
path = "C:/Users/jacob/Documents/Kaggle/titanic"
setwd(path)
savePath <- "./output"
source('fe_titanic.R')
library(rAutoML)
library(rAutoFE)
library(rAutoFS)
library(data.table)
library(h2o)
fe_impute <- function(data){
for(i in names(which(sapply(data, is.numeric)))){
miss_index <- which(is.na(data[,i]))
data[miss_index, i] <- median(data[, i], na.rm=TRUE)
}
return(data)
}
# prepare data
data <- read.csv("./input/train.csv")
data <- fe_titanic(data)
data$Survived <- as.factor(data$Survived)
data <- fe_impute(data)
sum(is.na(data))
str(data)
# use h2o.impute in fe
setDT(data)
splits <- splitFrame(dt=data, ratio = c(0.6, 0.2), seed=1234)
train <- splits[[1]]
valid <- splits[[2]]
test  <- splits[[3]]
y <- "Survived"
x = colnames(train)[colnames(train)!=y]
h2o.init()
dataset <- autoFE(train=train, valid=valid, test=test, x=x, y=y, savePath=savePath, verbose=TRUE)
train_hex <- as.h2o(dataset[[1]])
valid_hex <- as.h2o(dataset[[2]])
test_hex  <- as.h2o(dataset[[3]])
nrow(test_hex)
nrow(valid_hex)
nrow(train_hex)
ncol(train_hex)
sapply(dataset[[1]], nlevels)
fs <- rAutoFS::autoFS(data_hex=h2o.rbind(train_hex,valid_hex,test_hex),x,y,num_of_vi = 30)
sum(sapply(dataset[[1]], nlevels)==1)
fs
train_hex <- as.h2o(dataset[[1]])
valid_hex <- as.h2o(dataset[[2]])
test_hex  <- as.h2o(dataset[[3]])
y <- "Survived"
x = colnames(train_hex)[colnames(train_hex)!=y]
fs <- rAutoFS::autoFS(data_hex=h2o.rbind(train_hex,valid_hex,test_hex),x,y,num_of_vi = 30)
fs
# apply rAutoML
ml <- autoGBM(x=fs$top_vi, y, train_hex, valid_hex, test_hex, model_path="./output",init_points = 30,n_iter = 5)
# apply rAutoML
ml <- autoGBM(x=fs$top_vi, y, train_hex, valid_hex, test_hex, model_path="./output",init_points = 20,n_iter = 5)
names(ml)
?autoGBM
library(h2o)
library(rAutoML)
model_path <- c("C:/tmp")
h2o.init()
data(churn, package = "rAutoML")
churn_hex <- as.h2o(churn)
split_hex <- h2o.splitFrame(data = churn_hex, ratios = c(0.5,0.3), seed = 1234)
train_hex <- split_hex[[1]]
valid_hex <- split_hex[[2]]
test_hex  <- split_hex[[3]]
y <- "Churn."
x <- setdiff(names(churn_hex),  c(y))
autoGBM(x, y, train_hex, valid_hex, test_hex, model_path)
# title : titanic from kaggle
# authro : jacob
# desc : apply rAutoML
remove.packages("rAutoML")
library(devtools)
install_github("2econsulting/rAutoML")
# title : titanic from kaggle
# authro : jacob
# desc : apply rAutoML
# remove.packages("rAutoML")
# library(devtools)
# install_github("2econsulting/rAutoML")
# settting
path = "C:/Users/jacob/Documents/Kaggle/titanic"
setwd(path)
savePath <- "./output"
source('fe_titanic.R')
source('fe_impute.R')
library(rAutoML)
library(rAutoFE)
library(rAutoFS)
library(data.table)
library(h2o)
# prepare data
data <- read.csv("./input/train.csv")
data <- fe_titanic(data)
data$Survived <- as.factor(data$Survived)
data <- fe_impute(data)
setDT(data)
splits <- splitFrame(dt=data, ratio = c(0.6, 0.2), seed=1234)
train <- splits[[1]]
valid <- splits[[2]]
test  <- splits[[3]]
y <- "Survived"
x = colnames(train)[colnames(train)!=y]
# autoFE
h2o.init()
dataset <- autoFE(train=train, valid=valid, test=test, x=x, y=y, savePath=savePath, verbose=TRUE)
train_hex <- as.h2o(dataset[[1]])
valid_hex <- as.h2o(dataset[[2]])
test_hex  <- as.h2o(dataset[[3]])
# autoFS
fs <- rAutoFS::autoFS(
data_hex=h2o.rbind(train_hex,valid_hex,test_hex),
x = colnames(train_hex)[colnames(train_hex)!=y],
y = "Survived",
num_of_vi = 30
)
fs
# apply rAutoML
ml <- autoGBM(x=fs$top_vi, y, train_hex, valid_hex, test_hex, model_path="./output",init_points = 20,n_iter = 5)
names(ml)
ml['autoGBM_eval']
# make submission
newdata <- read.csv("./input/test.csv")
newdata <- fe_titanic(newdata)
newdata_hex <- as.h2o(newdata)
bestml <- ml['autoGBM_Models'][[1]]$H2OGBM_Random
output <- predict(bestml, newdata=newdata_hex)
output <- as.data.frame(output)
submission <- read.csv("./output/submission.csv")
submission$Survived <- output$predict
write.csv(submission, "./output/submission.csv", row.names=FALSE)
warnings()
train_hex <- as.h2o(train)
ncol(train_hex)
# title : titanic from kaggle
# authro : jacob
# desc : apply rAutoML
# remove.packages("rAutoML")
# library(devtools)
# install_github("2econsulting/rAutoML")
# settting
path = "C:/Users/jacob/Documents/Kaggle/titanic"
setwd(path)
savePath <- "./output"
source('fe_titanic.R')
source('fe_impute.R')
library(rAutoML)
library(rAutoFE)
library(rAutoFS)
library(data.table)
library(h2o)
# prepare data
data <- read.csv("./input/train.csv")
data <- fe_titanic(data)
data$Survived <- as.factor(data$Survived)
data <- fe_impute(data)
setDT(data)
splits <- splitFrame(dt=data, ratio = c(0.6, 0.2), seed=1234)
train <- splits[[1]]
valid <- splits[[2]]
test  <- splits[[3]]
y <- "Survived"
x = colnames(train)[colnames(train)!=y]
h2o.init()
train_hex <- as.h2o(train)
valid_hex <- as.h2o(valid)
test_hex  <- as.h2o(test)
ml <- autoGBM(x=fs$top_vi, y, train_hex, valid_hex, test_hex, model_path="./output",init_points = 20, n_iter = 5)
ml['autoGBM_eval']
# title : titanic from kaggle
# authro : jacob
# desc : apply rAutoML
# remove.packages("rAutoML")
# library(devtools)
# install_github("2econsulting/rAutoML")
# settting
path = "C:/Users/jacob/Documents/Kaggle/titanic"
setwd(path)
savePath <- "./output"
source('fe_titanic.R')
source('fe_impute.R')
library(rAutoML)
library(rAutoFE)
library(rAutoFS)
library(data.table)
library(h2o)
# prepare data
data <- read.csv("./input/train.csv")
data <- fe_titanic(data)
data$Survived <- as.factor(data$Survived)
data <- fe_impute(data)
setDT(data)
splits <- splitFrame(dt=data, ratio = c(0.6, 0.2), seed=1234)
train <- splits[[1]]
valid <- splits[[2]]
test  <- splits[[3]]
y <- "Survived"
x = colnames(train)[colnames(train)!=y]
h2o.init()
train_hex <- as.h2o(train)
valid_hex <- as.h2o(valid)
test_hex  <- as.h2o(test)
ml <- autoGBM(x, y, train_hex, valid_hex, test_hex, model_path="./output",init_points = 20, n_iter = 5)
ml['autoGBM_eval']
newdata <- read.csv("./input/test.csv")
newdata <- fe_titanic(newdata)
newdata_hex <- as.h2o(newdata)
bestml <- ml['autoGBM_Models'][[1]]$H2OGBM_Random
output <- predict(bestml, newdata=newdata_hex)
output <- as.data.frame(output)
submission <- read.csv("./output/submission.csv")
submission$Survived <- output$predict
write.csv(submission, "./output/submission.csv", row.names=FALSE)
# title : titanic from kaggle
# authro : jacob
# desc : apply rAutoML
# remove.packages("rAutoML")
# library(devtools)
# install_github("2econsulting/rAutoML")
# settting
path = "C:/Users/jacob/Documents/Kaggle/titanic"
setwd(path)
savePath <- "./output"
source('fe_titanic.R')
source('fe_impute.R')
library(rAutoML)
library(rAutoFE)
library(rAutoFS)
library(data.table)
library(h2o)
# prepare data
data <- read.csv("./input/train.csv")
data <- fe_titanic(data)
data$Survived <- as.factor(data$Survived)
data <- fe_impute(data)
setDT(data)
splits <- splitFrame(dt=data, ratio = c(0.5, 0.3), seed=1234)
train <- splits[[1]]
valid <- splits[[2]]
test  <- splits[[3]]
y <- "Survived"
x = colnames(train)[colnames(train)!=y]
h2o.init()
train_hex <- as.h2o(train)
valid_hex <- as.h2o(valid)
test_hex  <- as.h2o(test)
ml <- autoGBM(x, y, train_hex, valid_hex, test_hex, model_path="./output",init_points = 20, n_iter = 5)
ml['autoGBM_eval']
# make submission
newdata <- read.csv("./input/test.csv")
newdata <- fe_titanic(newdata)
newdata_hex <- as.h2o(newdata)
bestml <- ml['autoGBM_Models'][[1]]$H2OGBM_Random
output <- predict(bestml, newdata=newdata_hex)
output <- as.data.frame(output)
submission <- read.csv("./output/submission.csv")
submission$Survived <- output$predict
write.csv(submission, "./output/submission.csv", row.names=FALSE)
